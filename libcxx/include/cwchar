// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCUDACXX_CWCHAR
#define _LIBCUDACXX_CWCHAR

/*
    cwchar synopsis

Macros:

    NULL
    WCHAR_MAX
    WCHAR_MIN
    WEOF

namespace std
{

Types:

    mbstate_t
    size_t
    tm
    wint_t

int fwprintf(FILE* restrict stream, const wchar_t* restrict format, ...);
int fwscanf(FILE* restrict stream, const wchar_t* restrict format, ...);
int swprintf(wchar_t* restrict s, size_t n, const wchar_t* restrict format, ...);
int swscanf(const wchar_t* restrict s, const wchar_t* restrict format, ...);
int vfwprintf(FILE* restrict stream, const wchar_t* restrict format, va_list arg);
int vfwscanf(FILE* restrict stream, const wchar_t* restrict format, va_list arg);  // C99
int vswprintf(wchar_t* restrict s, size_t n, const wchar_t* restrict format, va_list arg);
int vswscanf(const wchar_t* restrict s, const wchar_t* restrict format, va_list arg);  // C99
int vwprintf(const wchar_t* restrict format, va_list arg);
int vwscanf(const wchar_t* restrict format, va_list arg);  // C99
int wprintf(const wchar_t* restrict format, ...);
int wscanf(const wchar_t* restrict format, ...);
wint_t fgetwc(FILE* stream);
wchar_t* fgetws(wchar_t* restrict s, int n, FILE* restrict stream);
wint_t fputwc(wchar_t c, FILE* stream);
int fputws(const wchar_t* restrict s, FILE* restrict stream);
int fwide(FILE* stream, int mode);
wint_t getwc(FILE* stream);
wint_t getwchar();
wint_t putwc(wchar_t c, FILE* stream);
wint_t putwchar(wchar_t c);
wint_t ungetwc(wint_t c, FILE* stream);
double wcstod(const wchar_t* restrict nptr, wchar_t** restrict endptr);
float wcstof(const wchar_t* restrict nptr, wchar_t** restrict endptr);         // C99
long double wcstold(const wchar_t* restrict nptr, wchar_t** restrict endptr);  // C99
long wcstol(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base);
long long wcstoll(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base);  // C99
unsigned long wcstoul(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base);
unsigned long long wcstoull(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base);  // C99
wchar_t* wcscpy(wchar_t* restrict s1, const wchar_t* restrict s2);
wchar_t* wcsncpy(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n);
wchar_t* wcscat(wchar_t* restrict s1, const wchar_t* restrict s2);
wchar_t* wcsncat(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n);
int wcscmp(const wchar_t* s1, const wchar_t* s2);
int wcscoll(const wchar_t* s1, const wchar_t* s2);
int wcsncmp(const wchar_t* s1, const wchar_t* s2, size_t n);
size_t wcsxfrm(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n);
const wchar_t* wcschr(const wchar_t* s, wchar_t c);
      wchar_t* wcschr(      wchar_t* s, wchar_t c);
size_t wcscspn(const wchar_t* s1, const wchar_t* s2);
size_t wcslen(const wchar_t* s);
const wchar_t* wcspbrk(const wchar_t* s1, const wchar_t* s2);
      wchar_t* wcspbrk(      wchar_t* s1, const wchar_t* s2);
const wchar_t* wcsrchr(const wchar_t* s, wchar_t c);
      wchar_t* wcsrchr(      wchar_t* s, wchar_t c);
size_t wcsspn(const wchar_t* s1, const wchar_t* s2);
const wchar_t* wcsstr(const wchar_t* s1, const wchar_t* s2);
      wchar_t* wcsstr(      wchar_t* s1, const wchar_t* s2);
wchar_t* wcstok(wchar_t* restrict s1, const wchar_t* restrict s2, wchar_t** restrict ptr);
const wchar_t* wmemchr(const wchar_t* s, wchar_t c, size_t n);
      wchar_t* wmemchr(      wchar_t* s, wchar_t c, size_t n);
int wmemcmp(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n);
wchar_t* wmemcpy(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n);
wchar_t* wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);
wchar_t* wmemset(wchar_t* s, wchar_t c, size_t n);
size_t wcsftime(wchar_t* restrict s, size_t maxsize, const wchar_t* restrict format,
                const tm* restrict timeptr);
wint_t btowc(int c);
int wctob(wint_t c);
int mbsinit(const mbstate_t* ps);
size_t mbrlen(const char* restrict s, size_t n, mbstate_t* restrict ps);
size_t mbrtowc(wchar_t* restrict pwc, const char* restrict s, size_t n, mbstate_t* restrict ps);
size_t wcrtomb(char* restrict s, wchar_t wc, mbstate_t* restrict ps);
size_t mbsrtowcs(wchar_t* restrict dst, const char** restrict src, size_t len,
                 mbstate_t* restrict ps);
size_t wcsrtombs(char* restrict dst, const wchar_t** restrict src, size_t len,
                 mbstate_t* restrict ps);

}  // std

*/

#include <__assert> // all public C++ headers provide the assertion handler
#include <__config>
#include <cwctype>
#include <wchar.h>

#if !defined(_LIBCUDACXX_HAS_NO_PRAGMA_SYSTEM_HEADER)
#  pragma GCC system_header
#endif

_LIBCUDACXX_BEGIN_NAMESPACE_STD

using ::mbstate_t _LIBCUDACXX_USING_IF_EXISTS;
using ::size_t _LIBCUDACXX_USING_IF_EXISTS;
using ::tm _LIBCUDACXX_USING_IF_EXISTS;
using ::wint_t _LIBCUDACXX_USING_IF_EXISTS;
using ::FILE _LIBCUDACXX_USING_IF_EXISTS;
using ::fwprintf _LIBCUDACXX_USING_IF_EXISTS;
using ::fwscanf _LIBCUDACXX_USING_IF_EXISTS;
using ::swprintf _LIBCUDACXX_USING_IF_EXISTS;
using ::vfwprintf _LIBCUDACXX_USING_IF_EXISTS;
using ::vswprintf _LIBCUDACXX_USING_IF_EXISTS;
using ::swscanf _LIBCUDACXX_USING_IF_EXISTS;
using ::vfwscanf _LIBCUDACXX_USING_IF_EXISTS;
using ::vswscanf _LIBCUDACXX_USING_IF_EXISTS;
using ::fgetwc _LIBCUDACXX_USING_IF_EXISTS;
using ::fgetws _LIBCUDACXX_USING_IF_EXISTS;
using ::fputwc _LIBCUDACXX_USING_IF_EXISTS;
using ::fputws _LIBCUDACXX_USING_IF_EXISTS;
using ::fwide _LIBCUDACXX_USING_IF_EXISTS;
using ::getwc _LIBCUDACXX_USING_IF_EXISTS;
using ::putwc _LIBCUDACXX_USING_IF_EXISTS;
using ::ungetwc _LIBCUDACXX_USING_IF_EXISTS;
using ::wcstod _LIBCUDACXX_USING_IF_EXISTS;
using ::wcstof _LIBCUDACXX_USING_IF_EXISTS;
using ::wcstold _LIBCUDACXX_USING_IF_EXISTS;
using ::wcstol _LIBCUDACXX_USING_IF_EXISTS;
using ::wcstoll _LIBCUDACXX_USING_IF_EXISTS;
using ::wcstoul _LIBCUDACXX_USING_IF_EXISTS;
using ::wcstoull _LIBCUDACXX_USING_IF_EXISTS;
using ::wcscpy _LIBCUDACXX_USING_IF_EXISTS;
using ::wcsncpy _LIBCUDACXX_USING_IF_EXISTS;
using ::wcscat _LIBCUDACXX_USING_IF_EXISTS;
using ::wcsncat _LIBCUDACXX_USING_IF_EXISTS;
using ::wcscmp _LIBCUDACXX_USING_IF_EXISTS;
using ::wcscoll _LIBCUDACXX_USING_IF_EXISTS;
using ::wcsncmp _LIBCUDACXX_USING_IF_EXISTS;
using ::wcsxfrm _LIBCUDACXX_USING_IF_EXISTS;
using ::wcschr _LIBCUDACXX_USING_IF_EXISTS;
using ::wcspbrk _LIBCUDACXX_USING_IF_EXISTS;
using ::wcsrchr _LIBCUDACXX_USING_IF_EXISTS;
using ::wcsstr _LIBCUDACXX_USING_IF_EXISTS;
using ::wmemchr _LIBCUDACXX_USING_IF_EXISTS;
using ::wcscspn _LIBCUDACXX_USING_IF_EXISTS;
using ::wcslen _LIBCUDACXX_USING_IF_EXISTS;
using ::wcsspn _LIBCUDACXX_USING_IF_EXISTS;
using ::wcstok _LIBCUDACXX_USING_IF_EXISTS;
using ::wmemcmp _LIBCUDACXX_USING_IF_EXISTS;
using ::wmemcpy _LIBCUDACXX_USING_IF_EXISTS;
using ::wmemmove _LIBCUDACXX_USING_IF_EXISTS;
using ::wmemset _LIBCUDACXX_USING_IF_EXISTS;
using ::wcsftime _LIBCUDACXX_USING_IF_EXISTS;
using ::btowc _LIBCUDACXX_USING_IF_EXISTS;
using ::wctob _LIBCUDACXX_USING_IF_EXISTS;
using ::mbsinit _LIBCUDACXX_USING_IF_EXISTS;
using ::mbrlen _LIBCUDACXX_USING_IF_EXISTS;
using ::mbrtowc _LIBCUDACXX_USING_IF_EXISTS;
using ::wcrtomb _LIBCUDACXX_USING_IF_EXISTS;
using ::mbsrtowcs _LIBCUDACXX_USING_IF_EXISTS;
using ::wcsrtombs _LIBCUDACXX_USING_IF_EXISTS;

using ::getwchar _LIBCUDACXX_USING_IF_EXISTS;
using ::vwscanf _LIBCUDACXX_USING_IF_EXISTS;
using ::wscanf _LIBCUDACXX_USING_IF_EXISTS;

using ::putwchar _LIBCUDACXX_USING_IF_EXISTS;
using ::vwprintf _LIBCUDACXX_USING_IF_EXISTS;
using ::wprintf _LIBCUDACXX_USING_IF_EXISTS;

_LIBCUDACXX_END_NAMESPACE_STD

#endif // _LIBCUDACXX_CWCHAR
