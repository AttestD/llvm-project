// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCUDACXX_CSTDIO
#define _LIBCUDACXX_CSTDIO

/*
    cstdio synopsis

Macros:

    BUFSIZ
    EOF
    FILENAME_MAX
    FOPEN_MAX
    L_tmpnam
    NULL
    SEEK_CUR
    SEEK_END
    SEEK_SET
    TMP_MAX
    _IOFBF
    _IOLBF
    _IONBF
    stderr
    stdin
    stdout

namespace std
{

Types:

FILE
fpos_t
size_t

int remove(const char* filename);
int rename(const char* old, const char* new);
FILE* tmpfile(void);
char* tmpnam(char* s);
int fclose(FILE* stream);
int fflush(FILE* stream);
FILE* fopen(const char* restrict filename, const char* restrict mode);
FILE* freopen(const char* restrict filename, const char * restrict mode,
              FILE * restrict stream);
void setbuf(FILE* restrict stream, char* restrict buf);
int setvbuf(FILE* restrict stream, char* restrict buf, int mode, size_t size);
int fprintf(FILE* restrict stream, const char* restrict format, ...);
int fscanf(FILE* restrict stream, const char * restrict format, ...);
int printf(const char* restrict format, ...);
int scanf(const char* restrict format, ...);
int snprintf(char* restrict s, size_t n, const char* restrict format, ...);    // C99
int sprintf(char* restrict s, const char* restrict format, ...);
int sscanf(const char* restrict s, const char* restrict format, ...);
int vfprintf(FILE* restrict stream, const char* restrict format, va_list arg);
int vfscanf(FILE* restrict stream, const char* restrict format, va_list arg);  // C99
int vprintf(const char* restrict format, va_list arg);
int vscanf(const char* restrict format, va_list arg);                          // C99
int vsnprintf(char* restrict s, size_t n, const char* restrict format,         // C99
              va_list arg);
int vsprintf(char* restrict s, const char* restrict format, va_list arg);
int vsscanf(const char* restrict s, const char* restrict format, va_list arg); // C99
int fgetc(FILE* stream);
char* fgets(char* restrict s, int n, FILE* restrict stream);
int fputc(int c, FILE* stream);
int fputs(const char* restrict s, FILE* restrict stream);
int getc(FILE* stream);
int getchar(void);
char* gets(char* s);  // removed in C++14
int putc(int c, FILE* stream);
int putchar(int c);
int puts(const char* s);
int ungetc(int c, FILE* stream);
size_t fread(void* restrict ptr, size_t size, size_t nmemb,
             FILE* restrict stream);
size_t fwrite(const void* restrict ptr, size_t size, size_t nmemb,
              FILE* restrict stream);
int fgetpos(FILE* restrict stream, fpos_t* restrict pos);
int fseek(FILE* stream, long offset, int whence);
int fsetpos(FILE*stream, const fpos_t* pos);
long ftell(FILE* stream);
void rewind(FILE* stream);
void clearerr(FILE* stream);
int feof(FILE* stream);
int ferror(FILE* stream);
void perror(const char* s);

}  // std
*/

#include <__assert> // all public C++ headers provide the assertion handler
#include <__config>
#include <stdio.h>

#if !defined(_LIBCUDACXX_HAS_NO_PRAGMA_SYSTEM_HEADER)
#  pragma GCC system_header
#endif

_LIBCUDACXX_BEGIN_NAMESPACE_STD

using ::FILE _LIBCUDACXX_USING_IF_EXISTS;
using ::fpos_t _LIBCUDACXX_USING_IF_EXISTS;
using ::size_t _LIBCUDACXX_USING_IF_EXISTS;

using ::fclose _LIBCUDACXX_USING_IF_EXISTS;
using ::fflush _LIBCUDACXX_USING_IF_EXISTS;
using ::setbuf _LIBCUDACXX_USING_IF_EXISTS;
using ::setvbuf _LIBCUDACXX_USING_IF_EXISTS;
using ::fprintf _LIBCUDACXX_USING_IF_EXISTS;
using ::fscanf _LIBCUDACXX_USING_IF_EXISTS;
using ::snprintf _LIBCUDACXX_USING_IF_EXISTS;
using ::sprintf _LIBCUDACXX_USING_IF_EXISTS;
using ::sscanf _LIBCUDACXX_USING_IF_EXISTS;
using ::vfprintf _LIBCUDACXX_USING_IF_EXISTS;
using ::vfscanf _LIBCUDACXX_USING_IF_EXISTS;
using ::vsscanf _LIBCUDACXX_USING_IF_EXISTS;
using ::vsnprintf _LIBCUDACXX_USING_IF_EXISTS;
using ::vsprintf _LIBCUDACXX_USING_IF_EXISTS;
using ::fgetc _LIBCUDACXX_USING_IF_EXISTS;
using ::fgets _LIBCUDACXX_USING_IF_EXISTS;
using ::fputc _LIBCUDACXX_USING_IF_EXISTS;
using ::fputs _LIBCUDACXX_USING_IF_EXISTS;
using ::getc _LIBCUDACXX_USING_IF_EXISTS;
using ::putc _LIBCUDACXX_USING_IF_EXISTS;
using ::ungetc _LIBCUDACXX_USING_IF_EXISTS;
using ::fread _LIBCUDACXX_USING_IF_EXISTS;
using ::fwrite _LIBCUDACXX_USING_IF_EXISTS;
#ifndef _LIBCUDACXX_HAS_NO_FGETPOS_FSETPOS
using ::fgetpos _LIBCUDACXX_USING_IF_EXISTS;
#endif
using ::fseek _LIBCUDACXX_USING_IF_EXISTS;
#ifndef _LIBCUDACXX_HAS_NO_FGETPOS_FSETPOS
using ::fsetpos _LIBCUDACXX_USING_IF_EXISTS;
#endif
using ::ftell _LIBCUDACXX_USING_IF_EXISTS;
using ::rewind _LIBCUDACXX_USING_IF_EXISTS;
using ::clearerr _LIBCUDACXX_USING_IF_EXISTS;
using ::feof _LIBCUDACXX_USING_IF_EXISTS;
using ::ferror _LIBCUDACXX_USING_IF_EXISTS;
using ::perror _LIBCUDACXX_USING_IF_EXISTS;

using ::fopen _LIBCUDACXX_USING_IF_EXISTS;
using ::freopen _LIBCUDACXX_USING_IF_EXISTS;
using ::remove _LIBCUDACXX_USING_IF_EXISTS;
using ::rename _LIBCUDACXX_USING_IF_EXISTS;
using ::tmpfile _LIBCUDACXX_USING_IF_EXISTS;
using ::tmpnam _LIBCUDACXX_USING_IF_EXISTS;

using ::getchar _LIBCUDACXX_USING_IF_EXISTS;
#if _LIBCUDACXX_STD_VER <= 11 && !defined(_LIBCUDACXX_C_HAS_NO_GETS)
using ::gets _LIBCUDACXX_USING_IF_EXISTS;
#endif
using ::scanf _LIBCUDACXX_USING_IF_EXISTS;
using ::vscanf _LIBCUDACXX_USING_IF_EXISTS;

using ::printf _LIBCUDACXX_USING_IF_EXISTS;
using ::putchar _LIBCUDACXX_USING_IF_EXISTS;
using ::puts _LIBCUDACXX_USING_IF_EXISTS;
using ::vprintf _LIBCUDACXX_USING_IF_EXISTS;

_LIBCUDACXX_END_NAMESPACE_STD

#endif // _LIBCUDACXX_CSTDIO
