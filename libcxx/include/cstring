// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCUDACXX_CSTRING
#define _LIBCUDACXX_CSTRING

/*
    cstring synopsis

Macros:

    NULL

namespace std
{

Types:

    size_t

void* memcpy(void* restrict s1, const void* restrict s2, size_t n);
void* memmove(void* s1, const void* s2, size_t n);
char* strcpy (char* restrict s1, const char* restrict s2);
char* strncpy(char* restrict s1, const char* restrict s2, size_t n);
char* strcat (char* restrict s1, const char* restrict s2);
char* strncat(char* restrict s1, const char* restrict s2, size_t n);
int memcmp(const void* s1, const void* s2, size_t n);
int strcmp (const char* s1, const char* s2);
int strncmp(const char* s1, const char* s2, size_t n);
int strcoll(const char* s1, const char* s2);
size_t strxfrm(char* restrict s1, const char* restrict s2, size_t n);
const void* memchr(const void* s, int c, size_t n);
      void* memchr(      void* s, int c, size_t n);
const char* strchr(const char* s, int c);
      char* strchr(      char* s, int c);
size_t strcspn(const char* s1, const char* s2);
const char* strpbrk(const char* s1, const char* s2);
      char* strpbrk(      char* s1, const char* s2);
const char* strrchr(const char* s, int c);
      char* strrchr(      char* s, int c);
size_t strspn(const char* s1, const char* s2);
const char* strstr(const char* s1, const char* s2);
      char* strstr(      char* s1, const char* s2);
char* strtok(char* restrict s1, const char* restrict s2);
void* memset(void* s, int c, size_t n);
char* strerror(int errnum);
size_t strlen(const char* s);

}  // std

*/

#include <__assert> // all public C++ headers provide the assertion handler
#include <__config>
#include <string.h>

#if !defined(_LIBCUDACXX_HAS_NO_PRAGMA_SYSTEM_HEADER)
#  pragma GCC system_header
#endif

_LIBCUDACXX_BEGIN_NAMESPACE_STD

using ::size_t _LIBCUDACXX_USING_IF_EXISTS;
using ::memcpy _LIBCUDACXX_USING_IF_EXISTS;
using ::memmove _LIBCUDACXX_USING_IF_EXISTS;
using ::strcpy _LIBCUDACXX_USING_IF_EXISTS;
using ::strncpy _LIBCUDACXX_USING_IF_EXISTS;
using ::strcat _LIBCUDACXX_USING_IF_EXISTS;
using ::strncat _LIBCUDACXX_USING_IF_EXISTS;
using ::memcmp _LIBCUDACXX_USING_IF_EXISTS;
using ::strcmp _LIBCUDACXX_USING_IF_EXISTS;
using ::strncmp _LIBCUDACXX_USING_IF_EXISTS;
using ::strcoll _LIBCUDACXX_USING_IF_EXISTS;
using ::strxfrm _LIBCUDACXX_USING_IF_EXISTS;
using ::memchr _LIBCUDACXX_USING_IF_EXISTS;
using ::strchr _LIBCUDACXX_USING_IF_EXISTS;
using ::strcspn _LIBCUDACXX_USING_IF_EXISTS;
using ::strpbrk _LIBCUDACXX_USING_IF_EXISTS;
using ::strrchr _LIBCUDACXX_USING_IF_EXISTS;
using ::strspn _LIBCUDACXX_USING_IF_EXISTS;
using ::strstr _LIBCUDACXX_USING_IF_EXISTS;
using ::strtok _LIBCUDACXX_USING_IF_EXISTS;
using ::memset _LIBCUDACXX_USING_IF_EXISTS;
using ::strerror _LIBCUDACXX_USING_IF_EXISTS;
using ::strlen _LIBCUDACXX_USING_IF_EXISTS;

_LIBCUDACXX_END_NAMESPACE_STD

#endif // _LIBCUDACXX_CSTRING
